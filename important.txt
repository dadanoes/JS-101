-------------------- Hal-hal penting ---------------------

Parameter vs. Argumen:
    - Parameter: Variabel yang terdaftar dalam definisi fungsi. Mereka adalah placeholder.
    - Argumen: Nilai-nilai aktual yang diteruskan ke fungsi saat fungsi tersebut dipanggil.

Parameter:
- Parameter Default (ES6): Anda bisa memberikan nilai default ke parameter jika argumen yang sesuai tidak disediakan saat pemanggilan fungsi.
- Rest Parameters (ES6): Memungkinkan Anda merepresentasikan jumlah argumen yang tidak terbatas sebagai sebuah array.
- Destructuring Parameters (ES6): Memungkinkan Anda untuk mengekstrak properti dari objek atau elemen dari array langsung ke dalam parameter fungsi.

Object vs Property vs Method:
    - Objek (Object): Kumpulan data yang lebih kompleks, seperti sebuah "benda" yang memiliki ciri-ciri dan kemampuan. Contohnya, "mobil" adalah objek.
    - Properti (Property): Ciri-ciri atau atribut dari sebuah objek. Ini adalah data yang dimiliki objek tersebut. contoh propertinya adalah "warna" (misalnya, merah) atau "merek" (misalnya, Toyota).
    - Metode (Method): Kemampuan atau tindakan yang bisa dilakukan oleh sebuah objek. Ini adalah fungsi yang terkait dengan objek tersebut. Untuk objek "mobil", contoh metodenya adalah "hidupkanMesin()" atau "rem()".

Object adalah kumpulan data yg berisi field/properties/attribute dan method/function/behaviour


(OOP)
- Object Literal adalah sebuah object yang didefinisikan dengan cara yang lebih sederhana dan mudah
- Constructor function = (Blueprint) memungkinkan kita membuat object dengan property dan method yg sama
- Inheritance = Object dapat memiliki properti dan method object lain
              - gunakan kata kunci 'extend' untuk meng-inherit property dan method dari class lain
              - gunakan kata kunci 'super' untuk memanggil inheritnya
- Prototypal Inheritance = object dapat mewarisi properti dan method dari object lain
- Prototype = object (induk) dari mana object lain mewarisi properti dan method
- Enkapsulasi = penggabungan data (properti) dan metode yang bekerja pada data tersebut menjadi satu kesatuan (kelas). Dalam JavaScript, ini sering dilakukan dengan mendefinisikan metode privat dan publik.
                - gunakan tanda _ (underscore) untuk menggunakan closure pada enkapsulasi
- Class : - Blueprint atau cetakan untuk membuat Object
          - berisi semua properties dan function yang dimiliki oleh Object
          - setiap Object selalu dibuat dari Class
          - dan sebuah class bisa membuat Object tanpa batas
- Polimorfisme memungkinkan metode memiliki perilaku yang berbeda.
- This =  mengacu pada instance objek saat ini.
    - dalam Method, this mengacu kepada object tempat method dipanggil
    - dalam Function, this mengacu kepada object global (web/window)
- Getter/Setter = mendefinisikan metode yang bertindak seperti properti (menyederhanakan akses properti)